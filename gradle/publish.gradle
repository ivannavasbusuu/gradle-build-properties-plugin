apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.ajoberstar.github-pages'

ext {
    websiteUrl = 'https://github.com/novoda/gradle-build-properties-plugin'
}

version = '0.4.1'
String tag = "v$project.version"
groovydoc.docTitle = 'Build Properties Plugin'

githubPages {
    commitMessage = "Deploy groovydoc for release $tag"
    pages {
        from groovydoc.destinationDir
        into "docs/${project.version}"
    }
}

pluginBundle {
    website = websiteUrl
    vcsUrl = websiteUrl
    description = 'A Gradle plugin to consume external build properties.'
    tags = ['java', 'android', 'gradle', 'build properties', 'project properties', "system properties"]

    plugins {
        gradleBuildPropertiesPlugin {
            id = 'com.novoda.build-properties'
            displayName = 'Gradle build properties plugin'
        }
    }
}

task prepareGhCredentials {
    description = 'Prepare GitHub credentials'
    group = 'release'
    doLast {
        String username = System.getenv()['GITHUB_USERNAME']
        String password = System.getenv()['GITHUB_TOKEN']
        System.properties['org.ajoberstar.grgit.auth.username'] = username
        System.properties['org.ajoberstar.grgit.auth.password'] = password
    }
}

prepareGhPages.dependsOn groovydoc
publishGhPages.dependsOn prepareGhCredentials

task prepareGradlePluginsRepoRelease {
    doLast {
        System.properties['gradle.publish.key'] = System.getenv()['GRADLE_PLUGINS_REPO_KEY']
        System.properties['gradle.publish.secret'] = System.getenv()['GRADLE_PLUGINS_REPO_SECRET']
    }
}

task prepareRelease {
    description = 'Prepare changelog and tag for release'
    group = 'release'
    dependsOn prepareGhPages, prepareGhCredentials, prepareGradlePluginsRepoRelease
    doLast {
        String changelog = extractChangelog()
        grgit.tag.add {
            name = tag
            message = "Release $tag\n\n$changelog"
        }
    }
}

String extractChangelog() {
    String fullChangelog = rootProject.file('CHANGELOG.md').text
    def latestChangelog = (fullChangelog =~ /\[Version ${project.version}.*\n-*([\s\S]*?)\[Version.*\n-*/)
    if (latestChangelog.size() > 0) {
        return latestChangelog[0][1].trim()
    }

    def firstChangelog = (fullChangelog =~ /\[Version ${project.version}.*\n-*([\s\S]*)/)
    if (firstChangelog.size() > 0) {
        return firstChangelog[0][1].trim()
    }
    throw new GradleException("No changelog found for version $project.version")
}

task printChangelog {
    group = 'help'
    description = "Print the provisional changelog for version $project.version"
    doLast {
        println "\nChangelog for version $project.version:\n${extractChangelog()}\n"
    }
}

task publishArtifacts {
    description = "Publish artifacts for plugin version: $tag"
    group = 'release'
    project.afterEvaluate {
        dependsOn bintrayUpload
        dependsOn publishPlugins
    }
    mustRunAfter prepareRelease
}

task publishGroovydoc {
    description = "Deploy groovydoc for plugin version: $tag"
    group = 'release'
    dependsOn publishGhPages
    mustRunAfter publishArtifacts
}

task publishRelease {
    description = "Publish release for plugin version: $tag"
    group = 'release'
    if (project.hasProperty('dryRun') && project['dryRun'] == 'false') {
        dependsOn prepareRelease, publishArtifacts, publishGroovydoc
        doLast {
            grgit.push {
                tags = true
            }
        }
    } else {
        project.afterEvaluate {
            dependsOn bintrayUpload
        }
    }
}

